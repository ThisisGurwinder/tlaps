(*
 * Copyright (C) 2008-2013  INRIA and Microsoft Corporation
 *)

open Kaputt.Abbreviations;;


let title_suite = "tla_norm - "

let title_fairness_group = title_suite
  ^ "normalize correctly fairness "

(* auxiliary definitions *)
let parse_expr = Tla_parser.P.use (E_parser.expr true);;
let nullctx = (Deque.empty, Ctx.dot);;

let create_expression str =
  let (flex, _) = Alexer.lex_string str in
  match Tla_parser.P.run parse_expr ~init:Tla_parser.init ~source:flex with
    | Some e -> e
    | None -> failwith "cannot parse test string"

let prn_exp exp =
      Tla_parser.Fu.pp_print_minimal
      Format.str_formatter (E_fmt.fmt_expr nullctx exp);
      Format.flush_str_formatter ()

let prn_str str = str

let t1 =
  let test_string = "WF_f(A)" in
  let test_case = create_expression test_string in
  let target_string = "<>[]ENABLED<<A>>_f => []<><<A>>_f" in
  let target_case = create_expression target_string in
	Test.make_simple_test
		~title:(title_fairness_group ^ test_string)
    ( fun () ->
      Assert.equal (prn_exp target_case)
        (prn_exp (expand_fairness ((),Deque.empty) test_case)))

let t2 =
  let test_string = "SF_f(A)" in
  let test_case = create_expression test_string in
  let target_string = "[]<>ENABLED<<A>>_f => []<><<A>>_f" in
  let target_case = create_expression target_string in
	Test.make_simple_test
		~title:(title_fairness_group ^ test_string)
    ( fun () ->
      Assert.equal (prn_exp target_case)
        (prn_exp (expand_fairness ((),Deque.empty) test_case)))

(* determines the kind of output for kaputt *)
let kaputt_output =
  try match Sys.getenv "Jenkins" with
  | "1" -> Test.Xml_junit_output (open_out "test/test_reports/expr/junit_e_tla_norm.xml")
  | _ -> Test.Text_output stdout
  with Not_found -> Test.Text_output stdout

let () = Test.run_tests ~output:kaputt_output [t1;t2]

(* Now let us print e *)
(*Tla_parser.Fu.pp_print_minimal Format.std_formatter (E_fmt.fmt_expr nullctx e);;
Format.print_newline ();;*)
(* vim : set ft=ocaml : *)
