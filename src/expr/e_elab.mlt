(*
 * Copyright (C) 2008-2013  INRIA and Microsoft Corporation
 *)

open Kaputt.Abbreviations;;


let title_suite = "e_elab - "

let title_except_normalize = title_suite ^ "except_normalize should "

let title_en_group = title_except_normalize
  ^ "normalize correctly exceptions of the form "

(* auxiliary definitions *)
let parse_expr = Tla_parser.P.use (E_parser.expr true);;
let nullctx = (Deque.empty, Ctx.dot);;


(* The expression will be parsed from this string *)
let (flex, _) = Alexer.lex_string "[f EXCEPT ![0] = 0, ![1] = 1][0] = f[0]";;

(* e is the expression *)
let test_case_1 =
  match Tla_parser.P.run parse_expr ~init:Tla_parser.init ~source:flex with
  | Some e -> e
  | None -> failwith "cannot parse test string"
;;

let create_expression str =
  let (flex, _) = Alexer.lex_string str in
  match Tla_parser.P.run parse_expr ~init:Tla_parser.init ~source:flex with
    | Some e -> e
    | None -> failwith "cannot parse test string"

let prn_exp exp =
      Tla_parser.Fu.pp_print_minimal
      Format.str_formatter (E_fmt.fmt_expr nullctx exp);
      Format.flush_str_formatter ()

let prn_str str = str

let t1 =
  let test_string = "[f EXCEPT ![0] = 0, ![1] = 1]" in
  let test_case = create_expression test_string in
  let target_case = create_expression
    "[[f EXCEPT ![0] = 0] EXCEPT ![1] = 1]" in
  (* let x = normalize Deque.empty test_case in
  Printf.eprintf "compare: %d\n" (Pervasives.compare x target_case); *)
	Test.make_simple_test
		~title:(title_en_group ^ test_string)
    ( fun () ->
      Assert.equal (prn_exp target_case)
        (prn_exp (normalize Deque.empty test_case)))

let t2 =
  let test_string = "[[f EXCEPT ![0] = 10, ![1] = 1] EXCEPT ![0] = 0]" in
  let test_case = create_expression test_string in
  let target_case = create_expression
    "[[[f EXCEPT ![0] = 10] EXCEPT ![1] = 1] EXCEPT ![0] = 0]" in
	Test.make_simple_test
		~title:(title_en_group ^ test_string)
    ( fun () ->
      Assert.equal (prn_exp target_case)
        (prn_exp (normalize Deque.empty test_case)))

let t3 =
  let test_string = "[f EXCEPT ![0] = ([f EXCEPT ![0] = 1, ![1] = 0][1])]" in
  let test_case = create_expression test_string in
  let target_case = create_expression
    "[f EXCEPT ![0] = ([[f EXCEPT ![0] = 1] EXCEPT ![1] = 0][1])]" in
	Test.make_simple_test
		~title:(title_en_group ^ test_string)
    ( fun () ->
      Assert.equal (prn_exp target_case)
        (prn_exp (normalize Deque.empty test_case)))

let t4 =
  let test_string = "[f EXCEPT ![([f EXCEPT ![0] = 1, ![1] = 0][1])] = 2]" in
  let test_case = create_expression test_string in
  let target_case = create_expression
    "[f EXCEPT ![([[f EXCEPT ![0] = 1] EXCEPT ![1] = 0][1])] = 2]" in
	Test.make_simple_test
		~title:(title_en_group ^ test_string)
    ( fun () ->
      Assert.equal (prn_exp target_case)
        (prn_exp (normalize Deque.empty test_case)))

let t5 =
  let test_string = "[f EXCEPT !.a = 3, !.b = 2, !.c = 1]" in
  let test_case = create_expression test_string in
  let target_case = create_expression
    "[[[f EXCEPT !.a = 3] EXCEPT !.b = 2] EXCEPT !.c = 1]" in
	Test.make_simple_test
		~title:(title_en_group ^ test_string)
    ( fun () ->
      Assert.equal (prn_exp target_case)
        (prn_exp (normalize Deque.empty test_case)))

let t6 =
  let test_string = "[[arr EXCEPT ![x][y] = foo] EXCEPT ![u][v] = bar]" in
  let test_case = create_expression test_string in
  let target_case = create_expression
    "[[arr EXCEPT ![x] = [arr[x] EXCEPT ![y] = foo]] EXCEPT ![u] = \
    [[arr EXCEPT ![x] = [arr[x] EXCEPT ![y] = foo]][u] EXCEPT ![v] = bar]]" in
	Test.make_simple_test
		~title:(title_en_group ^ test_string)
    ( fun () ->
      Assert.equal ~prn:prn_str (prn_exp target_case)
        (prn_exp (normalize Deque.empty test_case)))

let title_prime_normalize = title_suite ^ "prime_normalize should "

let title_pr_group = title_prime_normalize
  ^ "normalize correctly primed expressions of the form "

let t7 = (* doesnt work because we need to anonimie the created expressions from
the parser*)
  let test_string = "f[x]'" in
  let test_case = create_expression test_string in
  let target_case = create_expression
    "f'[x']" in
  (* let x = normalize Deque.empty test_case in
  Printf.eprintf "compare: %d\n" (Pervasives.compare x target_case); *)
	Test.make_simple_test
		~title:(title_pr_group ^ test_string)
    ( fun () ->
      Assert.equal (prn_exp target_case)
        (prn_exp (normalize Deque.empty test_case)))

(* determines the kind of output for kaputt *)
let kaputt_output =
  try match Sys.getenv "Jenkins" with
  | "1" -> Test.Xml_junit_output (open_out "test/test_reports/expr/junit_e_elab.xml")
  | _ -> Test.Text_output stdout
  with Not_found -> Test.Text_output stdout

let () = Test.run_tests ~output:kaputt_output [t1;t2;t3;t4;t5;t6]

(* Now let us print e *)
(*Tla_parser.Fu.pp_print_minimal Format.std_formatter (E_fmt.fmt_expr nullctx e);;
Format.print_newline ();;*)
(* vim : set ft=ocaml : *)
