(*
 * Copyright (C) 2008-2013  INRIA and Microsoft Corporation
 *)
open Kaputt.Abbreviations;;

let title_suite = "m_save - "

let title_complete_load = title_suite ^ "complete_load should"

let stloc =
  { Loc.file = "<Test>" ;
    Loc.start = Loc.dummy ;
    Loc.stop = Loc.dummy }
let stm x = Util.locate x stloc
let create_test_case ls =
  List.fold_left begin
    fun acc (nm,depls,df) ->
      let m = begin
        stm {
          name = noprops nm ;
          extendees = List.map (function x -> noprops x) depls ;
          instancees = [] ;
          defdepth = 0 ;
          important = true ;
          body = [ noprops (Variables [noprops df]) ];
          stage = Parsed ;
        }
      end in
      Sm.add m.core.name.core m acc
  end M_standard.initctx ls

let title_load_external_modules = title_complete_load ^
  " load external modules correctly for external modules which has the same name as a standard module"

let t1 =
  let test_case_list = [("a",["TLC"],"B")] in
  let test_case = create_test_case  test_case_list in
	Test.make_simple_test
		~title:(title_load_external_modules ^ " - load local module")
    ( fun () ->
      let rfold = (Filename.concat (Filename.concat (Sys.getenv "RESOURCE_FOLDER") "module") "m_save") in
      Assert.is_true (List.exists (function
        | {core = Variables ls} -> List.exists (fun x -> x.core = "m_save_t1") ls
       | _ -> false )
      (Sm.find "TLC" (complete_load ~root:rfold test_case)).core.body)
    )

let t2 =
  let test_case_list = [("a",["TLC"],"B")] in
  let test_case = create_test_case  test_case_list in
	Test.make_simple_test
		~title:(title_load_external_modules ^ " - load standard module")
    ( fun () ->
      Assert.is_true
      (Sm.mem "TLC" (complete_load test_case))
    )

(* determines the kind of output for kaputt *)
let kaputt_output =
  try match Sys.getenv "Jenkins" with
  | "1" -> Test.Xml_junit_output (open_out
  "test/test_reports/module/junit_m_save.xml")
  | _ -> Test.Text_output stdout
  with Not_found -> Test.Text_output stdout

let () = Test.run_tests ~output:kaputt_output [t1;t2]

(* vim : set ft=ocaml : *)
