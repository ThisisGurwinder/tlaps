(*
 * module/dep.mlt --- tests for modules dependencies
 *
 *
 * Copyright (C) 2008-2013  INRIA and Microsoft Corporation
 *)

open Kaputt.Abbreviations;;

module B = Builtin

let stloc =
  { Loc.file = "<Test>" ;
    Loc.start = Loc.dummy ;
    Loc.stop = Loc.dummy }

let stm x = Util.locate x stloc
let st = stm ()

let nullary what op =
  Definition (Operator (what @@ st, Apply (Internal op @@ st, []) @@ st)
    @@ st, Builtin, Visible, Export) @@ st

let title_suite = "m_dep - "

let create_test_case ls =
  List.fold_left begin
    fun acc (nm,depls,df) ->
      let m = begin
        stm {
          name = noprops nm ;
          extendees = List.map (function x -> noprops x) depls ;
          instancees = [] ;
          defdepth = 0 ;
          important = true ;
          body = [ noprops (Variables [noprops df]) ];
          stage = Parsed ;
        }
      end in
      Sm.add m.core.name.core m acc
  end Sm.empty ls

let id x = x

let equal_list_string = Assert.make_equal_list (=) (id)

let title_schedule = title_suite ^ "schedule should"

let title_schd_group1 = title_schedule
  ^ " compute correctly the extends relation over diamond shape for "

let cmd (_,modlist) n = List.flatten (
        List.map (function
      | {core=Variables(varlist);props=_}
        -> List.map (function x -> x.core) varlist
      | _ -> failwith "not supported"
    ) ((List.nth modlist n).core.body))
let asrt = ["A";"B";"C"]
let t1 =
  let test_case_list = [("a",[],"A");("b",["a"],"B");("c",["b";"a"],"C")] in
  let test_case = create_test_case  test_case_list in
	Test.make_simple_test
		~title:(title_schd_group1 ^ "c extends b before a and b extends a")
    ( fun () ->
      Assert.equal_int 3 (List.length (cmd (schedule test_case) 2));
      equal_list_string asrt (cmd (schedule test_case) 2 ) )

let t2 =
  let test_case_list = [("a",[],"A");("b",["a"],"B");("c",["a";"b"],"C")] in
  let test_case = create_test_case  test_case_list in
	Test.make_simple_test
		~title:(title_schd_group1 ^ "c extends a before b and b extends a")
    ( fun () ->
      Assert.equal_int 3 (List.length (cmd (schedule test_case) 2));
      equal_list_string asrt (cmd (schedule test_case) 2 ) )

let title_external_deps = title_suite ^ "external_deps should"

let t3 =
  let t3_str = " display dependency on local modules even if they have the same name as standard ones" in
  let test_case_list = [("a",["TLC"],"B")] in
  let test_case = create_test_case  test_case_list in
	Test.make_simple_test
		~title:(title_external_deps ^ t3_str)
    ( fun () ->
      Assert.is_true (Hs.exists (fun x -> x.core = "TLC") (external_deps
      (Sm.find "a" test_case)))
    )

(* determines the kind of output for kaputt *)
let kaputt_output =
  try match Sys.getenv "Jenkins" with
  | "1" -> Test.Xml_junit_output (open_out "test/test_reports/module/junit_m_dep.xml")
  | _ -> Test.Text_output stdout
  with Not_found -> Test.Text_output stdout

let () = Test.run_tests ~output:kaputt_output [t1;t2;t3]

(* vim : set ft=ocaml : *)
