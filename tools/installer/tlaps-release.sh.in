#!/bin/bash

set -e

OLDPWD="`pwd`"

TLAPSVER="$(echo "tlaps-@VERSION@" | sed -e 's/ /_/g')-@host_cpu@-@host_os@"

case "@EXE@" in
  "") TARGET_FILE="$TLAPSVER-inst.bin";;
  *) TARGET_FILE="$TLAPSVER-inst@EXE@";;
esac
TARGET="$OLDPWD/$TARGET_FILE"

if test -z "${SVN_PATH}"; then
    SVN_PATH=`svn info ../../.. | sed -n -e 's,^URL: .*repository/tla/,,p'`
fi

cat <<EOF

This script builds a binary distribution of the TLA+ Proof System
version @VERSION@, compiled with OCaml version @OCAMLCVER@.

Target: ${TARGET}
SVN branch: ${SVN_PATH}

EOF

if test -z "${MSR_SVN_USER}" ; then
    MSR_SVN_USER=${USER}
fi

repos="svn+ssh://${MSR_SVN_USER}@svn.msr-inria.inria.fr/var/lib/svn/repository/tla"

svn_export() {
   repo_path=${repos}/$1
   target=$2
   svn export -q $3 $4 ${repo_path} ${target}
}

STEPNO=0
banner() {
    case $STEPNO in
    0) ;;
    *) cat <<-EOF

	   *** SUCCESS ***

	EOF
    ;;
    esac
    STEPNO=$((STEPNO + 1))
    cat <<-EOF
	${STEPNO}. $1

	EOF
}

################################################################################

TLAPSDIR="/tmp/$TLAPSVER"
DOWNDIR="$TLAPSDIR/download"
BUILDDIR="$TLAPSDIR/build"
INSTDIR="$TLAPSDIR/install"

banner "Setting up directories"
rm -rf "$BUILDDIR" "$INSTDIR"
mkdir -p "$DOWNDIR"
echo "   [x] Created $DOWNDIR"
mkdir -p "$BUILDDIR"
echo "   [x] Created $BUILDDIR"
mkdir -p "$INSTDIR"
echo "   [x] Created $INSTDIR"

################################################################################

ISABELLE=Isabelle2011-1
banner "Downloading and packaging $ISABELLE"

case "@host_os@" in
  *linux*)  ISA_ARCHIVE="${ISABELLE}_bundle_x86-linux.tar.gz"
            ISA_ARCHIVE_TYPE=tgz
            Z3_EXEC=x86-linux/z3
            ADD_GMP_DLL=false
            ;;
  *cygwin*) ISA_ARCHIVE="${ISABELLE}_bundle_x86-cygwin.tar.gz"
            ISA_ARCHIVE_TYPE=tgz
            Z3_EXEC=x86-cygwin/z3-solver.exe
            ADD_GMP_DLL=true
            ;;
  *darwin*) ISA_ARCHIVE="${ISABELLE}.dmg"
            ISA_ARCHIVE_TYPE=dmg
            Z3_EXEC=Z3-not-available-under-MacOSX
            ADD_GMP_DLL=false
            ;;
  *) echo "unknown architecture: @host_os@" >&2; exit 3;;
esac

mkdir -p "$INSTDIR/lib/tlaps"

cd "$DOWNDIR"
if test -f "$ISA_ARCHIVE" ; then
    echo "   [x] $ISABELLE ALREADY downloaded"
else
    @WGET@ "http://isabelle.in.tum.de/website-$ISABELLE/dist/$ISA_ARCHIVE"
    echo "   [x] $ISABELLE distribution downloaded"
fi

case "$ISA_ARCHIVE_TYPE" in
  tgz) tar -C "$INSTDIR/lib/tlaps" -xzf "$ISA_ARCHIVE";;
  dmg) hdiutil attach "$ISA_ARCHIVE" -quiet -readonly -nobrowse \
               -mountpoint "$DOWNDIR/dmg"
       cp -a "$DOWNDIR/dmg/$ISABELLE.app/Contents/Resources/$ISABELLE" \
          "$INSTDIR/lib/tlaps/"
       hdiutil detach "$DOWNDIR/dmg" -quiet
       ;;
  *) echo "unknown archive type: $ISA_ARCHIVE_TYPE" >&2; exit 3;;
esac
if $ADD_GMP_DLL; then
    (
        cd $INSTDIR/lib/tlaps/$ISABELLE/contrib/polyml-5.4.0/x86-cygwin
        svn_export "$SVN_PATH/misc/cyggmp-3.dll"
    )
fi
echo "   [x] $ISABELLE extracted"

cd "$INSTDIR/lib/tlaps"
ISABELLE_DELETEDS=$(echo $ISABELLE/contrib/ProofGeneral* $ISABELLE/doc $ISABELLE/heaps/*/HOL $ISABELLE/lib/{classes,fonts,logo})
rm -rf $ISABELLE_DELETEDS
echo $ISABELLE_DELETEDS | xargs -n 1 echo '   [x] Trimmed'
cat >"$ISABELLE/README.TLAPS" <<EOF
The following files and directories have been deleted from
the default $ISABELLE distribution:

$(echo ${ISABELLE_DELETEDS} | xargs -n 1 echo ' *')

  -- TLAPS Maintainers <tlaps-devel@list.gforge.inria.fr>
     $(date +%Y/%m/%d)
EOF

ln -s -f "$ISABELLE" Isabelle

mkdir -p bin
cd bin
ln -s -f "../$ISABELLE/bin/isabelle"
ln -s -f "../$ISABELLE/bin/isabelle-process"
ln -s -f ../"$ISABELLE"/contrib/z3-*/"$Z3_EXEC" "z3@EXE@"

################################################################################

banner "Exporting Isabelle/TLA+"

mkdir -p "$INSTDIR/lib/tlaps"
cd "$INSTDIR/lib/tlaps"

svn_export "$SVN_PATH/isabelle" TLA+
echo "   [x] Exported"

################################################################################

banner "Exporting and building Zenon"

cd "$BUILDDIR"

svn_export "$SVN_PATH/zenon" zenon
echo "   [x] Exported"

( set -x
  cd zenon
  ./configure -coqc : -bindir "$INSTDIR/lib/tlaps/bin" \
              -libdir "$INSTDIR/lib/tlaps"
  make
  make install
) > zenon-build.log 2>&1
echo "   [x] Built"

################################################################################

CVC3_VERS=2.4.1
CVC3=CVC3-$CVC3_VERS
banner "Downloading and packaging $CVC3"

case "@host_os@" in
  *linux*)  CVC_DIR=linux32/
            CVC_ARCHIVE="cvc3-$CVC3_VERS-optimized-static.tar.gz"
            ;;
  *cygwin*) CVC_DIR=win32/
            CVC_ARCHIVE="cvc3-$CVC3_VERS-win32-optimized.tar.gz"
            ;;
  *darwin*) CVC_DIR=
            CVC_ARCHIVE="cvc3-$CVC3_VERS.tar.gz"
            ;;
  *) echo "unknown architecture: @host_os@" >&2; exit 3;;
esac

mkdir -p "$INSTDIR/lib/tlaps/bin"

cd "$DOWNDIR"
if test -f "$CVC_ARCHIVE" ; then
    echo "   [x] $CVC3 ALREADY downloaded"
else
    @WGET@ "http://cs.nyu.edu/acsys/cvc3/releases/$CVC3_VERS/$CVC_DIR$CVC_ARCHIVE"
    echo "   [x] $CVC3 distribution downloaded"
fi

case "@host_os@" in
  *darwin*)
    tar -C "$BUILDDIR" -xzf "$CVC_ARCHIVE"
    ( cd "$BUILDDIR"/cvc3-"$CVC3_VERS"
      ./configure --with-arith=native
      make
      cp bin/cvc3 "$INSTDIR/lib/tlaps/bin/"
    ) >"$BUILDDIR"/cvc3-build.log 2>&1

    echo "   [x] $CVC3 compiled and extracted"
    ;;
  *)
    tar -C "$BUILDDIR" -xzf "$CVC_ARCHIVE"
    cp "$BUILDDIR"/cvc3-"$CVC3_VERS"-*/bin/cvc3@EXE@ "$INSTDIR/lib/tlaps/bin/"

    echo "   [x] $CVC3 extracted"
    ;;
esac

################################################################################

LS4=ls4_v1.0.1
banner "Downloading and building LS4"

cd "$BUILDDIR"

@WGET@ "http://www.mpi-inf.mpg.de/~suda/$LS4.zip"
unzip -q -d ls4 "$LS4.zip"

echo "   [x] Downloaded"

( set -x
  cd ls4/core
  cc -c aiger.c
  make
  mkdir -p "$INSTDIR/lib/tlaps/bin"
  cp ls4@EXE@ "$INSTDIR/lib/tlaps/bin/"
) > ls4-build.log 2>&1
echo "   [x] Built"

################################################################################

banner "Exporting and building the 'translate' utility"

cd "$BUILDDIR"

svn_export "$SVN_PATH/translate" translate
echo "   [x] Exported"

( set -x
  cd translate
  ./buildb.sh
  mkdir -p "$INSTDIR/lib/tlaps/bin"
  cp translate.bin "$INSTDIR/lib/tlaps/bin/translate@EXE@"
  cp translate.bin "$INSTDIR/lib/tlaps/bin/ptl_to_trp@EXE@"
) > translate-build.log 2>&1
echo "   [x] Built"

################################################################################

banner "Exporting and building the TLA+ Proof Manager (tlapm)"

cd "$BUILDDIR"

svn_export "$SVN_PATH/tlapm" tlapm
echo "   [x] Exported"

( set -x
  cd tlapm
  ./configure --prefix "$INSTDIR"
  make all install
) > tlapm-build.log 2>&1
echo "   [x] Built"

################################################################################

banner "Exporting tla-mode"

cd "$INSTDIR"

mkdir -p lib/tlaps/emacs
svn_export "$SVN_PATH/misc/tla-mode" lib/tlaps/emacs/tla-mode
echo "   [x] Exported"

################################################################################

banner "Creating the uninstaller"

UNINST_FILE=un-inst@EXE@
UNINSTALLER="$INSTDIR/lib/tlaps/$UNINST_FILE"

UNINSTALLER_SOURCE="$BUILDDIR/uninstall.ml"
cat > "$UNINSTALLER_SOURCE" <<EOF
let flush_all () =
  flush stdout ;
  flush stderr

open Unix
open Printf

let verbose_unlink path =
  printf "UNLINK %s\n" path ;
  unlink path ;
  flush_all ()

let verbose_rmdir path =
  printf "RMDIR %s\n" path ;
  rmdir path ;
  flush_all ()

let output_dir =
  let d = Sys.executable_name in (* dest/lib/tlaps/$UNINST_FILE *)
  let d = Filename.dirname d in  (* dest/lib/tlaps *)
  let d = Filename.dirname d in  (* dest/lib *)
  let d = Filename.dirname d in  (* dest *)
  d

let path ents = match ents with
  | [] -> "/"
  | head :: rest ->
     List.fold_left Filename.concat head rest

let fatal_error fmt =
  output_string Pervasives.stderr "FATAL ERROR: " ;
  kfprintf
    (fun _ ->
       output_string Pervasives.stderr "\\n\\n    *** ABORT ***.\\n" ;
       flush Pervasives.stderr ;
       Pervasives.exit 2)
    Pervasives.stderr fmt

let rm_ifempty path = try begin
  let d = opendir path in
  let rec spin k =
    try ignore (readdir d) ; spin (k + 1) with End_of_file -> k in
  if spin 0 = 2 then verbose_rmdir path
end with _ -> ()

let rm_f path =
  try verbose_unlink path with _ -> ()

let rec rm_rf dir = try begin
  let d = opendir dir in
  let rec spin () =
    try begin
      match readdir d with
        | "." | ".." -> spin ()
        | ent ->
            let ent = Filename.concat dir ent in
            let st = lstat ent in
            begin match st.st_kind with
              | S_DIR -> rm_rf ent
              | _ -> rm_f ent
            end ;
            spin ()
    end with
      | End_of_file -> closedir d
  in
  spin () ;
  verbose_rmdir dir
end with _ -> ()

let () =
  printf "Uninstalling the TLA+ Proof System\\n" ;
  printf "version @VERSION@ from:\\n" ;
  printf "    %s\\n" output_dir ;
  flush_all () ;
  rm_f (path [ output_dir ; "bin" ; "tlapm@EXE@" ]) ;
  rm_ifempty (path [ output_dir ; "bin" ]) ;
  rm_rf (path [ output_dir ; "lib" ; "tlaps" ]) ;
  rm_ifempty (path [ output_dir ; "lib" ; "tlaps" ]) ;
  rm_ifempty (path [ output_dir ; "lib" ]) ;
  rm_ifempty (path [ output_dir ]) ;
  printf "Done.\\n" ;
  flush_all ()

EOF

ocamlopt -o "$UNINSTALLER" unix.cmxa "$UNINSTALLER_SOURCE"

################################################################################

banner "Creating $TLAPSVER.tar.gz"

cd "$INSTDIR"
rm -f "../$TLAPSVER.tar.gz"

tar --create --gzip --file="../$TLAPSVER.tar.gz" *

################################################################################

banner "Assembling $TARGET"

cd "$TLAPSDIR"

TAR_SIZE=$(wc -c < "$TLAPSVER.tar.gz")
if test $? -ne 0 ; then
    cat <<EOF
   *** Could not compute the size of ${TLAPSVER}.tar.gz ***

Aborted.
EOF
    exit 2
fi

SOURCE="$BUILDDIR/tlaps_release.ml"

rm -f "$TARGET" "$SOURCE"

cat > "$SOURCE" <<EOF
(* This file is automatically generated -- do not edit! *)

let flush_all () =
  flush stdout ;
  flush stderr

let buf_len = 8192

let input_all ic =
  let rec loop acc total buf ofs =
    let n = input ic buf ofs (buf_len - ofs) in
    if n = 0 then
      let res = String.create total in
      let pos = total - ofs in
      let _ = String.blit buf 0 res pos ofs in
      let coll pos buf =
        let new_pos = pos - buf_len in
        String.blit buf 0 res new_pos buf_len;
        new_pos in
      let _ = List.fold_left coll pos acc in
      res
    else
      let new_ofs = ofs + n in
      let new_total = total + n in
      if new_ofs = buf_len then
        loop (buf :: acc) new_total (String.create buf_len) 0
      else loop acc new_total buf new_ofs in
  loop [] 0 (String.create buf_len) 0

let input_file ?(bin=false) fname =
  let ch = (if bin then open_in_bin else open_in) fname in
  let str = input_all ch in
  close_in ch;
  str

open Unix
open Str
open Printf

let output_dir = ref "/usr/local"

let fatal_error fmt =
  output_string Pervasives.stderr "FATAL ERROR: " ;
  kfprintf
    (fun _ ->
       output_string Pervasives.stderr "\\n\\n    *** ABORT ***.\\n" ;
       flush Pervasives.stderr ;
       Pervasives.exit 2)
    Pervasives.stderr fmt

let () =
  Arg.parse [ "-d", Arg.Set_string output_dir, "Set the install directory" ]
    (fun arg -> fatal_error "Bad arguments %S" arg)
    "$TARGET_FILE [-d DIR]"

let () =
  if Filename.is_relative !output_dir then
    output_dir := Filename.concat (getcwd ()) !output_dir

let fails fn =
  try (fn () ; false)
  with ex ->
    Printf.eprintf "\nEXCEPTION: %s\n%!" (Printexc.to_string ex) ;
    true

let path ents = match ents with
  | [] -> "/"
  | head :: rest ->
     List.fold_left Filename.concat head rest

let maybe_unlink fn =
  if Sys.file_exists fn then unlink fn else ()

let () =
  printf "Installing the TLA+ Proof System\\n\\n" ;
  printf "    Version: @VERSION@\\n" ;
  printf "Destination: %s\\n\\n" !output_dir ;
  flush_all () ;
  let old_uninst = path [ !output_dir ; "lib" ; "tlaps" ; "$UNINST_FILE" ] in
  if Sys.file_exists old_uninst then begin
    printf "\\nThere appears to be an installation of TLAPS already in %s.\\n"
           !output_dir ;
    printf "Running its uninstaller...\\n" ;
    flush_all () ;
    let unret = Sys.command old_uninst in
    if unret <> 0 then
      eprintf "Error in running the old uninstaller! Continuing anyway...\\n" ;
    flush_all () ;
  end ;
  if Sys.command ("mkdir -p " ^ !output_dir) <> 0 then
    fatal_error "Cannot create %s." !output_dir ;
  let ost = lstat !output_dir in
  if ost.st_kind != S_DIR then
    fatal_error "%s already exists but is not a directory." !output_dir ;
  if fails begin fun () ->
    let p = path [ !output_dir ; ".test" ] in
    let f = open_out p in
    close_out f ; maybe_unlink p
  end then
    fatal_error "Cannot write to %s." !output_dir ;
  printf "Extracting ... " ;
  flush_all () ;
  let tar_cmd =
    Printf.sprintf "tail -c ${TAR_SIZE} \\"%s\\" | tar -xzp -C %s -f -"
      Sys.executable_name !output_dir in
  if Sys.command tar_cmd <> 0 then
    fatal_error "Could not extract into %s." !output_dir ;
  printf "done.\\n" ;
  printf "Compiling Isabelle theories.\\n" ;
  flush_all () ;
  let isabelle_settings_file =
    path [ !output_dir ; "lib" ; "tlaps" ; "Isabelle" ; "etc" ; "settings" ] in
  let isabelle_settings = input_file ~bin:true isabelle_settings_file in
  let isabelle_settings_modified =
    replace_first
      (regexp "^ISABELLE_HOME_USER=.*\$")
      ("ISABELLE_HOME_USER=" ^ path [ !output_dir ; "lib" ; "tlaps" ])
      isabelle_settings in
  if isabelle_settings = isabelle_settings_modified then
    fatal_error "Could not modify %s." isabelle_settings_file ;
  if fails begin fun () ->
    let f = open_out_bin isabelle_settings_file in
    output_string f isabelle_settings_modified ;
    close_out f
  end then
    fatal_error "Could not overwrite %s." isabelle_settings_file ;
  let pure_cmd = Printf.sprintf
    "cd %s && ../../bin/isabelle make"
    (path [ !output_dir ; "lib" ; "tlaps" ; "Isabelle" ; "src" ; "Pure" ]) in
  if Sys.command pure_cmd <> 0 then
    fatal_error "Could not compile Isabelle/Pure" ;
  let tla_plus_cmd = Printf.sprintf
    "cd %s && ../Isabelle/bin/isabelle usedir -b Pure TLA+"
    (path [ !output_dir ; "lib" ; "tlaps" ; "TLA+" ]) in
  if Sys.command tla_plus_cmd <> 0 then
    fatal_error "Could not compile Isabelle/TLA+" ;
  printf "Finished compiling Isabelle theories.\\n" ;
  printf "Performing a self-test ... " ;
  flush_all () ;
  if fails begin fun () ->
    let cmd = Printf.sprintf
      "cd %s/lib/tlaps; %s/bin/tlapm@EXE@ -C -I +examples/cantor Cantor1.tla > Cantor1.log 2>&1"
      !output_dir !output_dir in
    if Sys.command cmd <> 0 then
      failwith "self-test failed" ;
    maybe_unlink (path [!output_dir ; "lib/tlaps/Cantor1.log"]) ;
  end then
     fatal_error "Self-test unsuccessful!" ;
  printf "done.\\n" ;
  printf "\\nAll done.\\n\\n" ;
  flush_all () ;
  printf "REMEMBER to add %s to your \$PATH\\n"
    (path [ !output_dir ; "bin" ]) ;
  printf "You will also need to add\\n   %!";
  let p = path [ !output_dir ; "lib"; "tlaps" ] in
  begin match Sys.os_type with
  | "Cygwin" ->
     let cmd = sprintf "cygpath -d %s\\n" (Filename.quote p) in
     ignore (Sys.command cmd);
  | _ -> printf "%s\\n" p;
  end;
  printf "to the toolbox's library path \\
          (File->Preferences->TLA+ Preferences->Add Directory)\\n\\n";
  flush_all ()

EOF

ocamlopt -o "$TARGET" unix.cmxa str.cmxa "$SOURCE"
strip "$TARGET" || exit 0
cat "$TLAPSVER.tar.gz" >> "$TARGET"
rm -f "$TLAPSVER.tar.gz"

################################################################################

cat <<EOF

   *** SUCCESS ***

All done.

The file ${TARGET} is now ready to distribute.

EOF
