AC_INIT(TLA+ Proof System,@VERSION@,tlaps-devel@lists.gforge.inria.fr,tlaps)

dnl Not really needed:
dnl AC_PREREQ(2.64)

AC_CONFIG_AUX_DIR(${srcdir}/tools)

VERSION='@VERSION@'
RELEASEVERSION='@RELEASEVERSION@'
AC_SUBST(RELEASEVERSION)
AC_SUBST(VERSION)

AC_CANONICAL_HOST
case $host_os in
  *mingw* )
    EXE=".exe" ;;
  *cygwin* )
    EXE=".exe";;
  * )
    EXE="" ;;
esac
case $host_os in
  *darwin* )
    AS_VAR_SET(host_os,[darwin]) ;;
esac
AC_SUBST(EXE)
AC_SUBST(host_os)

AC_ARG_ENABLE([profiling],
  [AS_HELP_STRING([--enable-profiling],
    [compile with profiling [disabled]])],,[enable_profiling=no])
AC_SUBST(enable_profiling)

AC_ARG_ENABLE([debugging],
  [AS_HELP_STRING([--enable-debugging],
    [compile with debugging symbols [disabled]])],,[enable_debugging=no])
AC_SUBST(enable_debugging)

dnl AC_PROG_SED

AC_PATH_PROG(TAR,tar gtar,no)
AS_IF([test "x$TAR" = xno], [AC_MSG_ERROR(Cannot find tar)])

AC_PATH_PROGS(WGET,wget curl,no)
AS_IF([test "x$WGET" = xno], [AC_MSG_ERROR([Cannot find a URL fetching program (curl or wget)])])
case "$WGET" in
     *curl* )
       AS_VAR_APPEND(WGET,[" -O"]) ;;
     *wget* )
       AS_VAR_APPEND(WGET,[" -q"]) ;;
esac

AC_PATH_PROGS(OCAMLC,ocamlc.opt,ocamlc,no)
AS_IF([test "x$OCAMLC" = xno],[AC_MSG_ERROR(Cannot find ocamlc)])
OCAMLCVER=["`$OCAMLC -version`"]
AC_SUBST(OCAMLCVER)
AX_COMPARE_VERSION([$OCAMLCVER],[ge],[3.12.0],,
  AC_MSG_ERROR(OCaml version >= 3.12.0 required)
)

AC_PROG_INSTALL

AC_CONFIG_FILES([Makefile:tools/Makefile.in])
AC_CONFIG_FILES([src/config.ml:tools/config.ml.in])
AC_CONFIG_FILES([src/load.ml:tools/load.ml.in])
AC_CONFIG_FILES([tools/installer/tlaps-release.sh:tools/installer/tlaps-release.sh.in])
AC_CONFIG_FILES([tools/installer/tlaps-source-release.sh:tools/installer/tlaps-source-release.sh.in])

AC_OUTPUT

chmod +x tools/installer/tlaps-release.sh
chmod +x tools/installer/tlaps-source-release.sh

AS_IF([test "$silent" != yes],[cat <<EOF
----------------------------------------------------
The TLA+ Proof Manager (version @VERSION@) has been
successfully configured.

Run 'make' to build the PM and 'make install' to install it in

    ${prefix}/

When installed, it can be run as:

    ${prefix}/bin/tlapm
----------------------------------------------------
EOF
])
