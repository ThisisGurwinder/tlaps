Hints on effectively using the TLAPS

The TLA+ proof system is designed to check the validity of claims as
independently as possible of specific proof back-ends. We believe that users
should concentrate on writing proofs in terms of their particular applications,
not in terms of the capabilities of a particular proof system. In particular,
TLAPS invokes its back-ends with some default setup for automatic proof, and we
try to make it hard for users to change this default setup. Expert users of
back-end provers may be frustrated because they may have to develop proofs
somewhat further than what would be necessary with a fine-tuned tactic script.
The main payoff of limited access to the nitty-gritty details of provers is
greater clarity of the resulting proofs. They are also easier to maintain across
minor changes of the specification or new releases of the TLA prover.

On some occasions users will encounter situations where the prover cannot prove
an "obvious" proof obligation. Here are a few hints on what to try to make the
proof go through. Your additions to this lists are welcome.

--------------------------------------------------------------------------------

1. Control the size of formulas and expressions

Our provers are currently not good at making abstractions that humans understand
immediately. They are easily confused by moderately big proof obligations and
are just as likely to work on a top-level conjunction as on a set construction
buried deeply inside the formula. This can cause back-ends to become very slow
or even unable to complete seemingly trivial steps. While we intend to improve
the back-ends in this respect, you can help them by using local definitions in
proofs and hiding these definitions in order to keep expressions small. (Keep in
mind that definitions introduced in a proof are usable by default and must be
hidden explicitly, unlike definitions in specifications, which must be
explicitly USEd.)

Here is a contrived example:

LEMMA  /\ x \in SomeVeryBigExpression
       /\ y \in AnotherBigExpression
   <=>
       /\ y \in AnotherBigExpression
       /\ x \in SomeVeryBigExpression
<1> DEFINE S == SomeVeryBigExpression
    \** here and in the following, you may use positional names to avoid
    \** repeating the big expressions
<1> DEFINE T == AnotherBigExpression
<1>1. x \in S <=> x \in SomeVeryBigExpression
  OBVIOUS
<1>2. y \in T <=> y \in AnotherBigExpression
  OBVIOUS
<1> HIDE DEF S, T
<1>3. /\ x \in S
      /\ y \in T
  <=> 
      /\ y \in T
      /\ x \in S
  OBVIOUS
<1>4. QED
  BY <1>1, <1>2, <1>3

This kind of problem typically arises when reasoning about LET expressions,
which are silently expanded by the proof manager. In a proof, introduce local
definitions corresponding to the LET (using copy and paste from the
specification), show that the overall expression equals the body of the LET
(trivial by reflexivity), establish the necessary facts about these locally
defined operators, and HIDE the definitions afterwards.

--------------------------------------------------------------------------------

2. Avoid "circular" (sets of) equations

Rewriting is one effective way to reason about equations, and it underlies the
automatic proof methods used by the Isabelle back-end. The basic idea is to
orient equalities such that the expressions on the left-hand side are
systematically replaced by the right-hand sides. However, if the set of
equations contains cycles as in

  s = f(t)
  t = g(s)

then rewriting may never terminate. Isabelle employs some (incomplete)
heuristics to detect such cycles and will refuse to rewrite equations that it
determines to be circular. This usually leads to its inability to infer anything
about these equations. If circularity is not detected, it may cause Isabelle to
enter an infinite loop. The suggested remedy is again to introduce local
definitions that are hidden to break the loops.

As a concrete example consider the following proof snippet:

   <4>17. foo.name = "xyz"
     <5>1. foo = [name |-> "xyz", value = foo.value]
       BY <2>2
     <5>2. QED
       BY <5>1  \** may not work because <5>1 is a circular equation

One possible workaround is as follows:

   <4>17. foo.name = "xyz"
     <5>   DEFINE fooval == foo.value
     <5>1. foo = [name |-> "xyz", value = fooval]
       BY <2>2
     <5>   HIDE DEF fooval
     <5>2. QED
       BY <5>1

--------------------------------------------------------------------------------

3. Reason about CHOOSE expressions

Consider a definition such as

  foo == CHOOSE x \in S : P(x)

In order to prove a property Q(foo), you will typically prove the two following
assertions:

(a) \E x \in S : P(x)
(b) \A x \in S : P(x) => Q(x)

In some cases, assertion (b) can be trivial and need not be shown explicitly.
Reasoning about an unbounded CHOOSE expression is analogous.

Remember that CHOOSE always denotes some value, even if P(x) holds for no
x \in S (in particular, if S = {}), in which case the CHOOSE expression is
fixed, but arbitrary. In practice, CHOOSE expressions usually arise when
condition (a) is satisfied. Should you have designed your property to work even
if the domain of the CHOOSE is empty, property Q must be trivial in that case,
and you can structure your proof as follows:

  <3>5. Q(foo)
    <4>1. CASE \E x \in S : P(x)
      <5>1. \A x \in S : P(x) => Q(x)
      <5>2. QED
        BY <4>1, <5>1
    <4>2. CASE ~ \E x \in S : P(x)
      <5>1. \A x : Q(x)
      <5>2. QED
        BY <5>1
    <4>3. QED
      BY <4>1, <4>2

A frequent TLA+ idiom is to define a "null" value by writing

NoValue == CHOOSE x : x \notin Value

The laws of set theory ensure that no set is universal, hence there exists an x
that is not an element of set Value, ensuring condition (a) above. The theorem
NoSetContainsEverything in the standard module TLAPS can be used to prove this
condition.

--------------------------------------------------------------------------------

